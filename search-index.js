var searchIndex = {};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,null],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Eulerâ€™s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / Ï€`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / Ï€`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(Ï€)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `Ï€ / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `Ï€ / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `Ï€ / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `Ï€ / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `Ï€ / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedesâ€™ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["pandoc_ast"] = {"doc":"","items":[[3,"Map","pandoc_ast","A map based on a B-Tree.",null,null],[3,"Pandoc","","the root object of a pandoc document",null,null],[12,"meta","","",0,null],[12,"blocks","","",0,null],[12,"pandoc_api_version","","",0,null],[3,"Format","","Formats for raw blocks",null,null],[12,"0","","",1,null],[3,"Citation","","",null,null],[12,"citationId","","",2,null],[12,"citationPrefix","","",2,null],[12,"citationSuffix","","",2,null],[12,"citationMode","","",2,null],[12,"citationNoteNum","","",2,null],[12,"citationHash","","",2,null],[4,"MetaValue","","",null,null],[13,"MetaMap","","",3,null],[12,"c","pandoc_ast::MetaValue","",3,null],[13,"MetaList","pandoc_ast","",3,null],[12,"c","pandoc_ast::MetaValue","",3,null],[13,"MetaBool","pandoc_ast","",3,null],[12,"c","pandoc_ast::MetaValue","",3,null],[13,"MetaString","pandoc_ast","",3,null],[12,"c","pandoc_ast::MetaValue","",3,null],[13,"MetaInlines","pandoc_ast","",3,null],[12,"c","pandoc_ast::MetaValue","",3,null],[13,"MetaBlocks","pandoc_ast","",3,null],[12,"c","pandoc_ast::MetaValue","",3,null],[4,"Block","pandoc_ast","Structured text like tables and lists",null,null],[13,"Plain","","Plain text, not a paragraph",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"Para","pandoc_ast","Paragraph",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"LineBlock","pandoc_ast","Multiple non-breaking lines",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"CodeBlock","pandoc_ast","Code block (literal) with attributes",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"RawBlock","pandoc_ast","",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"BlockQuote","pandoc_ast","Block quote (list of blocks)",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"OrderedList","pandoc_ast","Ordered list (attributes and a list of items, each a list of blocks)",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"BulletList","pandoc_ast","Bullet list (list of items, each a list of blocks)",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"DefinitionList","pandoc_ast","Definition list Each list item is a pair consisting of a term (a list of inlines)\nand one or more definitions (each a list of blocks)",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"Header","pandoc_ast","Header - level (integer) and text (inlines)",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"HorizontalRule","pandoc_ast","",4,null],[13,"Table","","Table, with caption, column alignments (required), relative column widths (0 = default),\ncolumn headers (each a list of blocks), and rows (each a list of lists of blocks)",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"Div","pandoc_ast","Generic block container with attributes",4,null],[12,"c","pandoc_ast::Block","",4,null],[13,"Null","pandoc_ast","Nothing",4,null],[4,"Inline","","a single formatting item like bold, italic or hyperlink",null,null],[13,"Str","","Text",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Emph","pandoc_ast","Emphasized text",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Strong","pandoc_ast","Strongly emphasized text",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Strikeout","pandoc_ast","",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Superscript","pandoc_ast","",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Subscript","pandoc_ast","",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"SmallCaps","pandoc_ast","",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Quoted","pandoc_ast","Quoted text",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Cite","pandoc_ast","Citation",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Code","pandoc_ast","Inline code (literal)",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Space","pandoc_ast","Inter-word space",5,null],[13,"SoftBreak","","Soft line break",5,null],[13,"LineBreak","","Hard line break",5,null],[13,"Math","","TeX math (literal)",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"RawInline","pandoc_ast","",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Link","pandoc_ast","Hyperlink: text (list of inlines), target",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Image","pandoc_ast","Image: alt text (list of inlines), target",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Note","pandoc_ast","Footnote or endnote",5,null],[12,"c","pandoc_ast::Inline","",5,null],[13,"Span","pandoc_ast","Generic inline container with attributes",5,null],[12,"c","pandoc_ast::Inline","",5,null],[4,"Alignment","pandoc_ast","Alignment of a table column.",null,null],[13,"AlignLeft","","",6,null],[13,"AlignRight","","",6,null],[13,"AlignCenter","","",6,null],[13,"AlignDefault","","",6,null],[4,"ListNumberStyle","","Style of list numbers.",null,null],[13,"DefaultStyle","","",7,null],[13,"Example","","",7,null],[13,"Decimal","","",7,null],[13,"LowerRoman","","",7,null],[13,"UpperRoman","","",7,null],[13,"LowerAlpha","","",7,null],[13,"UpperAlpha","","",7,null],[4,"ListNumberDelim","","Delimiter of list numbers.",null,null],[13,"DefaultDelim","","",8,null],[13,"Period","","",8,null],[13,"OneParen","","",8,null],[13,"TwoParens","","",8,null],[4,"QuoteType","","Type of quotation marks to use in Quoted inline.",null,null],[13,"SingleQuote","","",9,null],[13,"DoubleQuote","","",9,null],[4,"MathType","","Type of math element (display or inline).",null,null],[13,"DisplayMath","","",10,null],[13,"InlineMath","","",10,null],[4,"CitationMode","","",null,null],[13,"AuthorInText","","",11,null],[13,"SuppressAuthor","","",11,null],[13,"NormalCitation","","",11,null],[5,"filter","","deserialized a json string to a Pandoc object, passes it to the closure/function\nand serializes the result back into a string",null,{"inputs":[{"name":"string"},{"name":"f"}],"output":{"name":"string"}}],[6,"Int","","",null,null],[6,"Double","","",null,null],[6,"ListAttributes","","",null,null],[6,"Attr","","Attributes: identifier, classes, key-value pairs",null,null],[6,"TableCell","","Table cells are list of Blocks",null,null],[6,"Target","","Link target (URL, title).",null,null],[11,"fmt","","",0,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"fmt","","",2,null],[11,"fmt","","",11,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",12,null],[11,"get","","Returns a reference to the value corresponding to the key.",12,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,null],[11,"insert","","Inserts a key-value pair into the map.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",12,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",12,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",12,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",12,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",12,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",12,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",12,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",12,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",12,null],[11,"len","","Returns the number of elements in the map.",12,null],[11,"is_empty","","Returns true if the map contains no elements.",12,null],[11,"serialize","","",12,null],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"into_deserializer","","",12,null],[11,"fmt","","",12,null],[11,"partial_cmp","","",12,null],[11,"drop","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"hash","","",12,null],[11,"extend","","",12,null],[11,"extend","","",12,null],[11,"into_iter","","",12,null],[11,"index","","",12,null],[11,"default","","Creates an empty `BTreeMap&lt;K, V&gt;`.",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clone","","",12,null],[11,"cmp","","",12,null],[11,"eq","","",12,null]],"paths":[[3,"Pandoc"],[3,"Format"],[3,"Citation"],[4,"MetaValue"],[4,"Block"],[4,"Inline"],[4,"Alignment"],[4,"ListNumberStyle"],[4,"ListNumberDelim"],[4,"QuoteType"],[4,"MathType"],[4,"CitationMode"],[3,"Map"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with [Macros\n1.1](https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md).","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&amp;str` so it interpolates as a byte-string: `b&quot;abc&quot;`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,null],[11,"append_all","","For use by `ToTokens` implementations.",2,null],[11,"append_separated","","For use by `ToTokens` implementations.",2,null],[11,"append_terminated","","For use by `ToTokens` implementations.",2,null],[11,"as_str","","",2,null],[11,"parse","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"fmt","","",0,null],[11,"to_tokens","","",0,null],[11,"to_tokens","","",2,null],[11,"fmt","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"to_tokens","","",3,null],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,null],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["serde"] = {"doc":"# Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&amp;[u8]` and `Vec&lt;u8&gt;`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec&lt;u8&gt;` in order to serialize and deserialize in an efficient\nway.",null,null],[3,"Bytes","","Wraps a `&amp;[u8]` in order to serialize in an efficient way. Does not support\ndeserialization.",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"new","","Wrap an existing `&amp;[u8]`.",1,null],[11,"fmt","","",1,null],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,null],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor`\ntrait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\nwas not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\nwas not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not\nexpected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&amp;str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&amp;[u8]` or `Vec&lt;u8&gt;` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option&lt;T&gt;` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was\nnot expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"deserialize_bool","","",5,null],[11,"deserialize_u8","","",5,null],[11,"deserialize_u16","","",5,null],[11,"deserialize_u32","","",5,null],[11,"deserialize_u64","","",5,null],[11,"deserialize_i8","","",5,null],[11,"deserialize_i16","","",5,null],[11,"deserialize_i32","","",5,null],[11,"deserialize_i64","","",5,null],[11,"deserialize_f32","","",5,null],[11,"deserialize_f64","","",5,null],[11,"deserialize_char","","",5,null],[11,"deserialize_str","","",5,null],[11,"deserialize_string","","",5,null],[11,"deserialize_unit","","",5,null],[11,"deserialize_seq","","",5,null],[11,"deserialize_seq_fixed_size","","",5,null],[11,"deserialize_bytes","","",5,null],[11,"deserialize_map","","",5,null],[11,"deserialize_unit_struct","","",5,null],[11,"deserialize_newtype_struct","","",5,null],[11,"deserialize_tuple_struct","","",5,null],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,null],[11,"deserialize_tuple","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,null],[11,"deserialize_byte_buf","","",5,null],[11,"deserialize","","",5,null],[11,"deserialize_option","","",5,null],[11,"deserialize_bool","","",6,null],[11,"deserialize_u8","","",6,null],[11,"deserialize_u16","","",6,null],[11,"deserialize_u32","","",6,null],[11,"deserialize_u64","","",6,null],[11,"deserialize_i8","","",6,null],[11,"deserialize_i16","","",6,null],[11,"deserialize_i32","","",6,null],[11,"deserialize_i64","","",6,null],[11,"deserialize_f32","","",6,null],[11,"deserialize_f64","","",6,null],[11,"deserialize_char","","",6,null],[11,"deserialize_str","","",6,null],[11,"deserialize_string","","",6,null],[11,"deserialize_unit","","",6,null],[11,"deserialize_option","","",6,null],[11,"deserialize_seq","","",6,null],[11,"deserialize_seq_fixed_size","","",6,null],[11,"deserialize_bytes","","",6,null],[11,"deserialize_map","","",6,null],[11,"deserialize_unit_struct","","",6,null],[11,"deserialize_newtype_struct","","",6,null],[11,"deserialize_tuple_struct","","",6,null],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,null],[11,"deserialize_tuple","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,null],[11,"deserialize_byte_buf","","",6,null],[11,"deserialize","","",6,null],[11,"deserialize_bool","","",7,null],[11,"deserialize_u8","","",7,null],[11,"deserialize_u16","","",7,null],[11,"deserialize_u32","","",7,null],[11,"deserialize_u64","","",7,null],[11,"deserialize_i8","","",7,null],[11,"deserialize_i16","","",7,null],[11,"deserialize_i32","","",7,null],[11,"deserialize_i64","","",7,null],[11,"deserialize_f32","","",7,null],[11,"deserialize_f64","","",7,null],[11,"deserialize_char","","",7,null],[11,"deserialize_str","","",7,null],[11,"deserialize_string","","",7,null],[11,"deserialize_unit","","",7,null],[11,"deserialize_option","","",7,null],[11,"deserialize_seq","","",7,null],[11,"deserialize_seq_fixed_size","","",7,null],[11,"deserialize_bytes","","",7,null],[11,"deserialize_map","","",7,null],[11,"deserialize_unit_struct","","",7,null],[11,"deserialize_newtype_struct","","",7,null],[11,"deserialize_tuple_struct","","",7,null],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,null],[11,"deserialize_tuple","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,null],[11,"deserialize_byte_buf","","",7,null],[11,"deserialize","","",7,null],[11,"deserialize_bool","","",8,null],[11,"deserialize_u8","","",8,null],[11,"deserialize_u16","","",8,null],[11,"deserialize_u32","","",8,null],[11,"deserialize_u64","","",8,null],[11,"deserialize_i8","","",8,null],[11,"deserialize_i16","","",8,null],[11,"deserialize_i32","","",8,null],[11,"deserialize_i64","","",8,null],[11,"deserialize_f32","","",8,null],[11,"deserialize_f64","","",8,null],[11,"deserialize_char","","",8,null],[11,"deserialize_str","","",8,null],[11,"deserialize_string","","",8,null],[11,"deserialize_unit","","",8,null],[11,"deserialize_option","","",8,null],[11,"deserialize_seq","","",8,null],[11,"deserialize_seq_fixed_size","","",8,null],[11,"deserialize_bytes","","",8,null],[11,"deserialize_map","","",8,null],[11,"deserialize_unit_struct","","",8,null],[11,"deserialize_newtype_struct","","",8,null],[11,"deserialize_tuple_struct","","",8,null],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,null],[11,"deserialize_tuple","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,null],[11,"deserialize_byte_buf","","",8,null],[11,"deserialize","","",8,null],[11,"deserialize_bool","","",9,null],[11,"deserialize_u8","","",9,null],[11,"deserialize_u16","","",9,null],[11,"deserialize_u32","","",9,null],[11,"deserialize_u64","","",9,null],[11,"deserialize_i8","","",9,null],[11,"deserialize_i16","","",9,null],[11,"deserialize_i32","","",9,null],[11,"deserialize_i64","","",9,null],[11,"deserialize_f32","","",9,null],[11,"deserialize_f64","","",9,null],[11,"deserialize_char","","",9,null],[11,"deserialize_str","","",9,null],[11,"deserialize_string","","",9,null],[11,"deserialize_unit","","",9,null],[11,"deserialize_option","","",9,null],[11,"deserialize_seq","","",9,null],[11,"deserialize_seq_fixed_size","","",9,null],[11,"deserialize_bytes","","",9,null],[11,"deserialize_map","","",9,null],[11,"deserialize_unit_struct","","",9,null],[11,"deserialize_newtype_struct","","",9,null],[11,"deserialize_tuple_struct","","",9,null],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,null],[11,"deserialize_tuple","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,null],[11,"deserialize_byte_buf","","",9,null],[11,"deserialize","","",9,null],[11,"deserialize_bool","","",10,null],[11,"deserialize_u8","","",10,null],[11,"deserialize_u16","","",10,null],[11,"deserialize_u32","","",10,null],[11,"deserialize_u64","","",10,null],[11,"deserialize_i8","","",10,null],[11,"deserialize_i16","","",10,null],[11,"deserialize_i32","","",10,null],[11,"deserialize_i64","","",10,null],[11,"deserialize_f32","","",10,null],[11,"deserialize_f64","","",10,null],[11,"deserialize_char","","",10,null],[11,"deserialize_str","","",10,null],[11,"deserialize_string","","",10,null],[11,"deserialize_unit","","",10,null],[11,"deserialize_option","","",10,null],[11,"deserialize_seq","","",10,null],[11,"deserialize_seq_fixed_size","","",10,null],[11,"deserialize_bytes","","",10,null],[11,"deserialize_map","","",10,null],[11,"deserialize_unit_struct","","",10,null],[11,"deserialize_newtype_struct","","",10,null],[11,"deserialize_tuple_struct","","",10,null],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,null],[11,"deserialize_tuple","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,null],[11,"deserialize_byte_buf","","",10,null],[11,"deserialize","","",10,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_str","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_seq_fixed_size","","",11,null],[11,"deserialize_bytes","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_unit_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"deserialize_tuple_struct","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,null],[11,"deserialize_byte_buf","","",11,null],[11,"deserialize","","",11,null],[11,"deserialize_bool","","",12,null],[11,"deserialize_u8","","",12,null],[11,"deserialize_u16","","",12,null],[11,"deserialize_u32","","",12,null],[11,"deserialize_u64","","",12,null],[11,"deserialize_i8","","",12,null],[11,"deserialize_i16","","",12,null],[11,"deserialize_i32","","",12,null],[11,"deserialize_i64","","",12,null],[11,"deserialize_f32","","",12,null],[11,"deserialize_f64","","",12,null],[11,"deserialize_char","","",12,null],[11,"deserialize_str","","",12,null],[11,"deserialize_string","","",12,null],[11,"deserialize_unit","","",12,null],[11,"deserialize_option","","",12,null],[11,"deserialize_seq","","",12,null],[11,"deserialize_seq_fixed_size","","",12,null],[11,"deserialize_bytes","","",12,null],[11,"deserialize_map","","",12,null],[11,"deserialize_unit_struct","","",12,null],[11,"deserialize_newtype_struct","","",12,null],[11,"deserialize_tuple_struct","","",12,null],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,null],[11,"deserialize_tuple","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,null],[11,"deserialize_byte_buf","","",12,null],[11,"deserialize","","",12,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"deserialize_byte_buf","","",13,null],[11,"deserialize","","",13,null],[11,"deserialize_bool","","",14,null],[11,"deserialize_u8","","",14,null],[11,"deserialize_u16","","",14,null],[11,"deserialize_u32","","",14,null],[11,"deserialize_u64","","",14,null],[11,"deserialize_i8","","",14,null],[11,"deserialize_i16","","",14,null],[11,"deserialize_i32","","",14,null],[11,"deserialize_i64","","",14,null],[11,"deserialize_f32","","",14,null],[11,"deserialize_f64","","",14,null],[11,"deserialize_char","","",14,null],[11,"deserialize_str","","",14,null],[11,"deserialize_string","","",14,null],[11,"deserialize_unit","","",14,null],[11,"deserialize_option","","",14,null],[11,"deserialize_seq","","",14,null],[11,"deserialize_seq_fixed_size","","",14,null],[11,"deserialize_bytes","","",14,null],[11,"deserialize_map","","",14,null],[11,"deserialize_unit_struct","","",14,null],[11,"deserialize_newtype_struct","","",14,null],[11,"deserialize_tuple_struct","","",14,null],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,null],[11,"deserialize_tuple","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,null],[11,"deserialize_byte_buf","","",14,null],[11,"deserialize","","",14,null],[11,"deserialize_bool","","",15,null],[11,"deserialize_u8","","",15,null],[11,"deserialize_u16","","",15,null],[11,"deserialize_u32","","",15,null],[11,"deserialize_u64","","",15,null],[11,"deserialize_i8","","",15,null],[11,"deserialize_i16","","",15,null],[11,"deserialize_i32","","",15,null],[11,"deserialize_i64","","",15,null],[11,"deserialize_f32","","",15,null],[11,"deserialize_f64","","",15,null],[11,"deserialize_char","","",15,null],[11,"deserialize_str","","",15,null],[11,"deserialize_string","","",15,null],[11,"deserialize_unit","","",15,null],[11,"deserialize_option","","",15,null],[11,"deserialize_seq","","",15,null],[11,"deserialize_seq_fixed_size","","",15,null],[11,"deserialize_bytes","","",15,null],[11,"deserialize_map","","",15,null],[11,"deserialize_unit_struct","","",15,null],[11,"deserialize_newtype_struct","","",15,null],[11,"deserialize_tuple_struct","","",15,null],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,null],[11,"deserialize_tuple","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,null],[11,"deserialize_byte_buf","","",15,null],[11,"deserialize","","",15,null],[11,"deserialize_bool","","",16,null],[11,"deserialize_u8","","",16,null],[11,"deserialize_u16","","",16,null],[11,"deserialize_u32","","",16,null],[11,"deserialize_u64","","",16,null],[11,"deserialize_i8","","",16,null],[11,"deserialize_i16","","",16,null],[11,"deserialize_i32","","",16,null],[11,"deserialize_i64","","",16,null],[11,"deserialize_f32","","",16,null],[11,"deserialize_f64","","",16,null],[11,"deserialize_char","","",16,null],[11,"deserialize_str","","",16,null],[11,"deserialize_string","","",16,null],[11,"deserialize_unit","","",16,null],[11,"deserialize_option","","",16,null],[11,"deserialize_seq","","",16,null],[11,"deserialize_seq_fixed_size","","",16,null],[11,"deserialize_bytes","","",16,null],[11,"deserialize_map","","",16,null],[11,"deserialize_unit_struct","","",16,null],[11,"deserialize_newtype_struct","","",16,null],[11,"deserialize_tuple_struct","","",16,null],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,null],[11,"deserialize_tuple","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,null],[11,"deserialize_byte_buf","","",16,null],[11,"deserialize","","",16,null],[11,"deserialize_bool","","",17,null],[11,"deserialize_u8","","",17,null],[11,"deserialize_u16","","",17,null],[11,"deserialize_u32","","",17,null],[11,"deserialize_u64","","",17,null],[11,"deserialize_i8","","",17,null],[11,"deserialize_i16","","",17,null],[11,"deserialize_i32","","",17,null],[11,"deserialize_i64","","",17,null],[11,"deserialize_f32","","",17,null],[11,"deserialize_f64","","",17,null],[11,"deserialize_char","","",17,null],[11,"deserialize_str","","",17,null],[11,"deserialize_string","","",17,null],[11,"deserialize_unit","","",17,null],[11,"deserialize_option","","",17,null],[11,"deserialize_seq","","",17,null],[11,"deserialize_seq_fixed_size","","",17,null],[11,"deserialize_bytes","","",17,null],[11,"deserialize_map","","",17,null],[11,"deserialize_unit_struct","","",17,null],[11,"deserialize_newtype_struct","","",17,null],[11,"deserialize_tuple_struct","","",17,null],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,null],[11,"deserialize_tuple","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,null],[11,"deserialize_byte_buf","","",17,null],[11,"deserialize","","",17,null],[11,"deserialize_bool","","",18,null],[11,"deserialize_u8","","",18,null],[11,"deserialize_u16","","",18,null],[11,"deserialize_u32","","",18,null],[11,"deserialize_u64","","",18,null],[11,"deserialize_i8","","",18,null],[11,"deserialize_i16","","",18,null],[11,"deserialize_i32","","",18,null],[11,"deserialize_i64","","",18,null],[11,"deserialize_f32","","",18,null],[11,"deserialize_f64","","",18,null],[11,"deserialize_char","","",18,null],[11,"deserialize_str","","",18,null],[11,"deserialize_string","","",18,null],[11,"deserialize_unit","","",18,null],[11,"deserialize_option","","",18,null],[11,"deserialize_seq","","",18,null],[11,"deserialize_seq_fixed_size","","",18,null],[11,"deserialize_bytes","","",18,null],[11,"deserialize_map","","",18,null],[11,"deserialize_unit_struct","","",18,null],[11,"deserialize_newtype_struct","","",18,null],[11,"deserialize_tuple_struct","","",18,null],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,null],[11,"deserialize_tuple","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,null],[11,"deserialize_byte_buf","","",18,null],[11,"deserialize","","",18,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_seq_fixed_size","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize","","",19,null],[11,"deserialize","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,null],[11,"deserialize_u8","","",20,null],[11,"deserialize_u16","","",20,null],[11,"deserialize_u32","","",20,null],[11,"deserialize_u64","","",20,null],[11,"deserialize_i8","","",20,null],[11,"deserialize_i16","","",20,null],[11,"deserialize_i32","","",20,null],[11,"deserialize_i64","","",20,null],[11,"deserialize_f32","","",20,null],[11,"deserialize_f64","","",20,null],[11,"deserialize_char","","",20,null],[11,"deserialize_str","","",20,null],[11,"deserialize_string","","",20,null],[11,"deserialize_unit","","",20,null],[11,"deserialize_option","","",20,null],[11,"deserialize_seq","","",20,null],[11,"deserialize_seq_fixed_size","","",20,null],[11,"deserialize_bytes","","",20,null],[11,"deserialize_map","","",20,null],[11,"deserialize_unit_struct","","",20,null],[11,"deserialize_newtype_struct","","",20,null],[11,"deserialize_tuple_struct","","",20,null],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,null],[11,"deserialize_tuple","","",20,null],[11,"deserialize_ignored_any","","",20,null],[11,"deserialize_byte_buf","","",20,null],[11,"visit_variant_seed","","",20,null],[11,"deserialize","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,null],[11,"deserialize_u8","","",21,null],[11,"deserialize_u16","","",21,null],[11,"deserialize_u32","","",21,null],[11,"deserialize_u64","","",21,null],[11,"deserialize_i8","","",21,null],[11,"deserialize_i16","","",21,null],[11,"deserialize_i32","","",21,null],[11,"deserialize_i64","","",21,null],[11,"deserialize_f32","","",21,null],[11,"deserialize_f64","","",21,null],[11,"deserialize_char","","",21,null],[11,"deserialize_str","","",21,null],[11,"deserialize_string","","",21,null],[11,"deserialize_unit","","",21,null],[11,"deserialize_option","","",21,null],[11,"deserialize_seq","","",21,null],[11,"deserialize_seq_fixed_size","","",21,null],[11,"deserialize_bytes","","",21,null],[11,"deserialize_map","","",21,null],[11,"deserialize_unit_struct","","",21,null],[11,"deserialize_newtype_struct","","",21,null],[11,"deserialize_tuple_struct","","",21,null],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,null],[11,"deserialize_tuple","","",21,null],[11,"deserialize_ignored_any","","",21,null],[11,"deserialize_byte_buf","","",21,null],[11,"visit_variant_seed","","",21,null],[11,"deserialize","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,null],[11,"deserialize_u8","","",22,null],[11,"deserialize_u16","","",22,null],[11,"deserialize_u32","","",22,null],[11,"deserialize_u64","","",22,null],[11,"deserialize_i8","","",22,null],[11,"deserialize_i16","","",22,null],[11,"deserialize_i32","","",22,null],[11,"deserialize_i64","","",22,null],[11,"deserialize_f32","","",22,null],[11,"deserialize_f64","","",22,null],[11,"deserialize_char","","",22,null],[11,"deserialize_str","","",22,null],[11,"deserialize_string","","",22,null],[11,"deserialize_unit","","",22,null],[11,"deserialize_option","","",22,null],[11,"deserialize_seq","","",22,null],[11,"deserialize_seq_fixed_size","","",22,null],[11,"deserialize_bytes","","",22,null],[11,"deserialize_map","","",22,null],[11,"deserialize_unit_struct","","",22,null],[11,"deserialize_newtype_struct","","",22,null],[11,"deserialize_tuple_struct","","",22,null],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,null],[11,"deserialize_tuple","","",22,null],[11,"deserialize_ignored_any","","",22,null],[11,"deserialize_byte_buf","","",22,null],[11,"visit_variant_seed","","",22,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to\n`Visitor::visit_seq`.",23,null],[11,"deserialize","","",23,null],[11,"deserialize_bool","","",23,null],[11,"deserialize_u8","","",23,null],[11,"deserialize_u16","","",23,null],[11,"deserialize_u32","","",23,null],[11,"deserialize_u64","","",23,null],[11,"deserialize_i8","","",23,null],[11,"deserialize_i16","","",23,null],[11,"deserialize_i32","","",23,null],[11,"deserialize_i64","","",23,null],[11,"deserialize_f32","","",23,null],[11,"deserialize_f64","","",23,null],[11,"deserialize_char","","",23,null],[11,"deserialize_str","","",23,null],[11,"deserialize_string","","",23,null],[11,"deserialize_unit","","",23,null],[11,"deserialize_option","","",23,null],[11,"deserialize_seq","","",23,null],[11,"deserialize_seq_fixed_size","","",23,null],[11,"deserialize_bytes","","",23,null],[11,"deserialize_map","","",23,null],[11,"deserialize_unit_struct","","",23,null],[11,"deserialize_newtype_struct","","",23,null],[11,"deserialize_tuple_struct","","",23,null],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,null],[11,"deserialize_tuple","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,null],[11,"deserialize_byte_buf","","",23,null],[11,"visit_seed","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,null],[11,"deserialize_bool","","",24,null],[11,"deserialize_u8","","",24,null],[11,"deserialize_u16","","",24,null],[11,"deserialize_u32","","",24,null],[11,"deserialize_u64","","",24,null],[11,"deserialize_i8","","",24,null],[11,"deserialize_i16","","",24,null],[11,"deserialize_i32","","",24,null],[11,"deserialize_i64","","",24,null],[11,"deserialize_f32","","",24,null],[11,"deserialize_f64","","",24,null],[11,"deserialize_char","","",24,null],[11,"deserialize_str","","",24,null],[11,"deserialize_string","","",24,null],[11,"deserialize_unit","","",24,null],[11,"deserialize_option","","",24,null],[11,"deserialize_seq","","",24,null],[11,"deserialize_seq_fixed_size","","",24,null],[11,"deserialize_bytes","","",24,null],[11,"deserialize_map","","",24,null],[11,"deserialize_unit_struct","","",24,null],[11,"deserialize_newtype_struct","","",24,null],[11,"deserialize_tuple_struct","","",24,null],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,null],[11,"deserialize_tuple","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,null],[11,"deserialize_byte_buf","","",24,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to\n`Visitor::visit_map`.",25,null],[11,"deserialize","","",25,null],[11,"deserialize_seq","","",25,null],[11,"deserialize_seq_fixed_size","","",25,null],[11,"deserialize_bool","","",25,null],[11,"deserialize_u8","","",25,null],[11,"deserialize_u16","","",25,null],[11,"deserialize_u32","","",25,null],[11,"deserialize_u64","","",25,null],[11,"deserialize_i8","","",25,null],[11,"deserialize_i16","","",25,null],[11,"deserialize_i32","","",25,null],[11,"deserialize_i64","","",25,null],[11,"deserialize_f32","","",25,null],[11,"deserialize_f64","","",25,null],[11,"deserialize_char","","",25,null],[11,"deserialize_str","","",25,null],[11,"deserialize_string","","",25,null],[11,"deserialize_unit","","",25,null],[11,"deserialize_option","","",25,null],[11,"deserialize_bytes","","",25,null],[11,"deserialize_map","","",25,null],[11,"deserialize_unit_struct","","",25,null],[11,"deserialize_newtype_struct","","",25,null],[11,"deserialize_tuple_struct","","",25,null],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,null],[11,"deserialize_tuple","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,null],[11,"deserialize_byte_buf","","",25,null],[11,"visit_key_seed","","",25,null],[11,"visit_value_seed","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,null],[11,"deserialize_bool","","",26,null],[11,"deserialize_u8","","",26,null],[11,"deserialize_u16","","",26,null],[11,"deserialize_u32","","",26,null],[11,"deserialize_u64","","",26,null],[11,"deserialize_i8","","",26,null],[11,"deserialize_i16","","",26,null],[11,"deserialize_i32","","",26,null],[11,"deserialize_i64","","",26,null],[11,"deserialize_f32","","",26,null],[11,"deserialize_f64","","",26,null],[11,"deserialize_char","","",26,null],[11,"deserialize_str","","",26,null],[11,"deserialize_string","","",26,null],[11,"deserialize_unit","","",26,null],[11,"deserialize_option","","",26,null],[11,"deserialize_seq","","",26,null],[11,"deserialize_seq_fixed_size","","",26,null],[11,"deserialize_bytes","","",26,null],[11,"deserialize_map","","",26,null],[11,"deserialize_unit_struct","","",26,null],[11,"deserialize_newtype_struct","","",26,null],[11,"deserialize_tuple_struct","","",26,null],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,null],[11,"deserialize_tuple","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,null],[11,"deserialize_byte_buf","","",26,null],[11,"into_deserializer","serde::bytes","",1,null],[11,"deserialize","serde::de::value","",27,null],[11,"deserialize_bool","","",27,null],[11,"deserialize_u8","","",27,null],[11,"deserialize_u16","","",27,null],[11,"deserialize_u32","","",27,null],[11,"deserialize_u64","","",27,null],[11,"deserialize_i8","","",27,null],[11,"deserialize_i16","","",27,null],[11,"deserialize_i32","","",27,null],[11,"deserialize_i64","","",27,null],[11,"deserialize_f32","","",27,null],[11,"deserialize_f64","","",27,null],[11,"deserialize_char","","",27,null],[11,"deserialize_str","","",27,null],[11,"deserialize_string","","",27,null],[11,"deserialize_unit","","",27,null],[11,"deserialize_option","","",27,null],[11,"deserialize_seq","","",27,null],[11,"deserialize_seq_fixed_size","","",27,null],[11,"deserialize_bytes","","",27,null],[11,"deserialize_map","","",27,null],[11,"deserialize_unit_struct","","",27,null],[11,"deserialize_newtype_struct","","",27,null],[11,"deserialize_tuple_struct","","",27,null],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,null],[11,"deserialize_tuple","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,null],[11,"deserialize_byte_buf","","",27,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,null],[11,"deserialize_bool","","",28,null],[11,"deserialize_u8","","",28,null],[11,"deserialize_u16","","",28,null],[11,"deserialize_u32","","",28,null],[11,"deserialize_u64","","",28,null],[11,"deserialize_i8","","",28,null],[11,"deserialize_i16","","",28,null],[11,"deserialize_i32","","",28,null],[11,"deserialize_i64","","",28,null],[11,"deserialize_f32","","",28,null],[11,"deserialize_f64","","",28,null],[11,"deserialize_char","","",28,null],[11,"deserialize_str","","",28,null],[11,"deserialize_string","","",28,null],[11,"deserialize_unit","","",28,null],[11,"deserialize_option","","",28,null],[11,"deserialize_seq","","",28,null],[11,"deserialize_seq_fixed_size","","",28,null],[11,"deserialize_bytes","","",28,null],[11,"deserialize_map","","",28,null],[11,"deserialize_unit_struct","","",28,null],[11,"deserialize_newtype_struct","","",28,null],[11,"deserialize_tuple_struct","","",28,null],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,null],[11,"deserialize_tuple","","",28,null],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,null],[11,"deserialize_byte_buf","","",28,null],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive\nerror messages belonging to the `Deserializer` against which they are\ncurrently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was\nexpecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that\nis wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains\ntoo many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an\nunrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an\nunrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required\nfield with a particular name but that field was not present in the\ninput.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting\nto receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as\nthe `Display` and `Debug` traits.",30,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you\never find yourself looking for a way to pass data into a `Deserialize` impl,\nthis trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except\nwith some initial piece of data (the seed) passed in.",32,null],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,null],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,null],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,null],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,null],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,null],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,null],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,null],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,null],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,null],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,null],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,null],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,null],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,null],[11,"visit_str","","Deserialize a `&amp;str` into a `Value`.",34,null],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,null],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,null],[11,"visit_none","","Deserialize an absent optional `Value`.",34,null],[11,"visit_some","","Deserialize a present optional `Value`.",34,null],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,null],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,null],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,null],[11,"visit_enum","","Deserialize `Value` as an enum.",34,null],[11,"visit_bytes","","Deserialize a `&amp;[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec&lt;u8&gt;` into a `Value`.",34,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed\nto the `Deserialize` in order to identify which variant of an enum to\ndeserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum\nvariant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,null],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and\npassed to the `Deserialize` to deserialize the content of a particular enum\nvariant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,null],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,null],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,null],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,null],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",30,null],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support\nserializing one of the compound types.",null,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_key","","",39,null],[11,"serialize_value","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors\nbelonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error\nwhile serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_field`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[11,"collect_seq","","Collect an iterator as a sequence.",42,null],[11,"collect_map","","Collect an iterator as a map.",42,null],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and\n`Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,null],[10,"end","","Finish serializing a sequence.",43,null],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,null],[10,"end","","Finish serializing a tuple.",44,null],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,null],[10,"end","","Finish serializing a tuple struct.",45,null],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,null],[10,"end","","Finish serializing a tuple variant.",46,null],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,null],[10,"serialize_value","","Serialize a map value.",47,null],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,null],[10,"end","","Finish serializing a map.",47,null],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,null],[10,"end","","Finish serializing a struct.",48,null],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,null],[10,"end","","Finish serializing a struct variant.",49,null],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_field`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[11,"collect_seq","","Collect an iterator as a sequence.",42,null],[11,"collect_map","","Collect an iterator as a map.",42,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format\nfor Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,null],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",5,null],[13,"Internal","","`#[serde(tag = &quot;type&quot;)]`",5,null],[13,"None","","`#[serde(untagged)]`",5,null],[4,"FieldDefault","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",6,null],[13,"Default","","The default is given by `std::default::Default::default()`.",6,null],[13,"Path","","The default is given by this function.",6,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",7,null],[11,"serialize_name","","Return the container name for the container when serializing.",7,null],[11,"deserialize_name","","Return the container name for the container when deserializing.",7,null],[11,"fmt","","",8,null],[11,"fmt","","",5,null],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",8,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",8,null],[11,"deny_unknown_fields","","",8,null],[11,"ser_bound","","",8,null],[11,"de_bound","","",8,null],[11,"tag","","",8,null],[11,"fmt","","",9,null],[11,"from_ast","","",9,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",9,null],[11,"skip_deserializing","","",9,null],[11,"skip_serializing","","",9,null],[11,"fmt","","",10,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",10,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",10,null],[11,"skip_serializing","","",10,null],[11,"skip_deserializing","","",10,null],[11,"skip_serializing_if","","",10,null],[11,"default","","",10,null],[11,"serialize_with","","",10,null],[11,"deserialize_with","","",10,null],[11,"ser_bound","","",10,null],[11,"de_bound","","",10,null],[11,"default","serde_codegen_internals","",11,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",11,null],[11,"check","","",11,null],[11,"drop","","",11,null]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"EnumTag"],[4,"FieldDefault"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_json"] = {"doc":"# Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or\ndeserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO\nstream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent\nany valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_iter","","Creates a JSON parser from a `std::iter::Iterator`.",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON parser from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON parser from a `&amp;[u8]`.",1,null],[11,"from_str","","Creates a JSON parser from a `&amp;str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",1,null],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,null],[11,"next","","",2,null],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or\ndeserializing JSON data.",null,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"errorimpl"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `&quot;`",4,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",4,null],[13,"Solidus","","An escaped solidus `/`",4,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",4,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",4,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",4,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",4,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",4,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as\n`\\u00XX` where `XX` are two hex characters)",4,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO\nstream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",5,null],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",5,null],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",5,null],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",5,null],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",5,null],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",5,null],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",5,null],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",5,null],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",5,null],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",5,null],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",5,null],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",5,null],[11,"begin_string","","Called before each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",5,null],[11,"end_string","","Called after each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",5,null],[11,"write_string_fragment","","Writes a string fragment that doesn&#39;t need any escaping to the\nspecified writer.",5,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",5,null],[11,"begin_array","","Called before every array.  Writes a `[` to the specified\nwriter.",5,null],[11,"end_array","","Called after every array.  Writes a `]` to the specified\nwriter.",5,null],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to\nthe specified writer.",5,null],[11,"end_array_value","","Called after every array value.",5,null],[11,"begin_object","","Called before every object.  Writes a `{` to the specified\nwriter.",5,null],[11,"end_object","","Called after every object.  Writes a `}` to the specified\nwriter.",5,null],[11,"begin_object_key","","Called before every object key.",5,null],[11,"end_object_key","","Called after every object key.  A `:` should be written to the\nspecified writer by either this method or\n`begin_object_value`.",5,null],[11,"begin_object_value","","Called before every object value.  A `:` should be written to\nthe specified writer by either this method or\n`end_object_key`.",5,null],[11,"end_object_value","","Called after every object value.",5,null],[11,"new","","Creates a new JSON serializer.",6,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",6,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",6,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",8,null],[11,"end_array","","",8,null],[11,"begin_array_value","","",8,null],[11,"end_array_value","","",8,null],[11,"begin_object","","",8,null],[11,"end_object","","",8,null],[11,"begin_object_key","","",8,null],[11,"begin_object_value","","",8,null],[11,"end_object_value","","",8,null],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Map","serde_json::value","Represents a key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent\nany valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get`\nand `get_mut` methods of `Value`.",null,null],[8,"ToJson","","Representation of any serializable data as a `serde_json::Value`.",null,null],[10,"to_json","","Represent `self` as a `serde_json::Value`. Note that `Value` is not a\nJSON string. If you need a string, use `serde_json::to_string` instead.",9,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"get","","Index into a JSON array or map. A string index can be used to access a\nvalue in a map, and a usize index can be used to access an element of an\narray.",0,null],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to\naccess a value in a map, and a usize index can be used to access an\nelement of an array.",0,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",0,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",0,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",0,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",0,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",0,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,null],[11,"is_i64","","Returns true if the `Value` is a number that can be represented by i64.",0,null],[11,"is_u64","","Returns true if the `Value` is a number that can be represented by u64.",0,null],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,null],[11,"as_i64","","If the `Value` is a number, represent it as i64 if possible.\nReturns None otherwise.",0,null],[11,"as_u64","","If the `Value` is a number, represent it as u64 if possible.\nReturns None otherwise.",0,null],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible.\nReturns None otherwise.",0,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",0,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",0,null],[11,"pointer","","Looks up a value by a JSON Pointer.",0,null],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to\nthat value.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or\n`value[&quot;k&quot;]`.",0,null],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or\n`value[&quot;k&quot;] = ...`.",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",0,null],[11,"deserialize_option","","",0,null],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,null],[11,"deserialize_bool","","",0,null],[11,"deserialize_u8","","",0,null],[11,"deserialize_u16","","",0,null],[11,"deserialize_u32","","",0,null],[11,"deserialize_u64","","",0,null],[11,"deserialize_i8","","",0,null],[11,"deserialize_i16","","",0,null],[11,"deserialize_i32","","",0,null],[11,"deserialize_i64","","",0,null],[11,"deserialize_f32","","",0,null],[11,"deserialize_f64","","",0,null],[11,"deserialize_char","","",0,null],[11,"deserialize_str","","",0,null],[11,"deserialize_string","","",0,null],[11,"deserialize_unit","","",0,null],[11,"deserialize_seq","","",0,null],[11,"deserialize_seq_fixed_size","","",0,null],[11,"deserialize_bytes","","",0,null],[11,"deserialize_byte_buf","","",0,null],[11,"deserialize_map","","",0,null],[11,"deserialize_unit_struct","","",0,null],[11,"deserialize_tuple_struct","","",0,null],[11,"deserialize_struct","","",0,null],[11,"deserialize_struct_field","","",0,null],[11,"deserialize_tuple","","",0,null],[11,"deserialize_ignored_any","","",0,null],[11,"new","serde_json","Makes a new empty Map.",10,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",10,null],[11,"get","","Returns a reference to the value corresponding to the key.",10,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",10,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",10,null],[11,"insert","","Inserts a key-value pair into the map.",10,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",10,null],[11,"len","","Returns the number of elements in the map.",10,null],[11,"is_empty","","Returns true if the map contains no elements.",10,null],[11,"iter","","Gets an iterator over the entries of the map.",10,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",10,null],[11,"keys","","Gets an iterator over the keys of the map.",10,null],[11,"values","","Gets an iterator over the values of the map.",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"fmt","","",10,null],[11,"serialize","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",10,null],[11,"into_iter","","",10,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"is_i64","","Returns true if the number can be represented by i64.",11,null],[11,"is_u64","","Returns true if the number can be represented as u64.",11,null],[11,"is_f64","","Returns true if the number can be represented as f64.",11,null],[11,"as_i64","","Returns the number represented as i64 if possible, or else None.",11,null],[11,"as_u64","","Returns the number represented as u64 if possible, or else None.",11,null],[11,"as_f64","","Returns the number represented as f64 if possible, or else None.",11,null],[11,"from_f64","","Converts a finite f64 to a Number. Infinite or NaN values are not JSON\nnumbers.",11,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"serialize","","",11,null],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",11,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_str","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_seq_fixed_size","","",11,null],[11,"deserialize_bytes","","",11,null],[11,"deserialize_byte_buf","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_unit_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"deserialize_tuple_struct","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,null],[11,"from","","",11,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[8,"ToJson"],[3,"Map"],[3,"Number"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","",null,null],[12,"ident","","",1,null],[12,"vis","","",1,null],[12,"attrs","","",1,null],[12,"ty","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"data","","",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",11,null],[12,"tts","","The delimited sequence of token trees",11,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",12,null],[12,"tts","","",12,null],[3,"DeriveInput","","",null,null],[12,"ident","","",13,null],[12,"vis","","",13,null],[12,"attrs","","",13,null],[12,"generics","","",13,null],[12,"body","","",13,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",14,null],[12,"types","","The type parameters for this path segment, if present.",14,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",14,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",15,null],[12,"ty","","",15,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",16,null],[12,"abi","","",16,null],[12,"lifetimes","","",16,null],[12,"inputs","","",16,null],[12,"output","","",16,null],[12,"variadic","","",16,null],[3,"MutTy","","",null,null],[12,"ty","","",17,null],[12,"mutability","","",17,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"inputs","","`(A, B)`",18,null],[12,"output","","`C`",18,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",19,null],[12,"segments","","The segments in the path: the things separated by `::`.",19,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",20,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",20,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",21,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",21,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",22,null],[12,"position","","",22,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",23,null],[12,"ty","","",23,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","",24,null],[13,"Inner","","",24,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",25,null],[13,"List","","List meta item.",25,null],[13,"NameValue","","Name value meta item.",25,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",26,null],[13,"Literal","","A literal.",26,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",27,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",27,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",27,null],[13,"Lit","","A literal (For example: `1`, `&quot;foo&quot;`)",27,null],[13,"Cast","","A cast (`foo as f64`)",27,null],[13,"Path","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",27,null],[13,"Index","","An indexing operation (`foo[2]`)",27,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",27,null],[13,"Other","","If compiling with full support for expression syntax, any expression is\nallowed",27,null],[4,"VariantData","","",null,null],[13,"Struct","","",28,null],[13,"Tuple","","",28,null],[13,"Unit","","",28,null],[4,"Visibility","","",null,null],[13,"Public","","",29,null],[13,"Crate","","",29,null],[13,"Restricted","","",29,null],[13,"Inherited","","",29,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",30,null],[13,"Maybe","","",30,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\n`typeck::collect::compute_bounds` matches these against\nthe &quot;special&quot; built-in traits (see `middle::lang_items`) and\ndetects Copy, Send and Sync.",null,null],[13,"Trait","","",31,null],[13,"Region","","",31,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",32,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",32,null],[13,"EqPredicate","","An equality predicate (unsupported)",32,null],[4,"FloatTy","","",null,null],[13,"F32","","",33,null],[13,"F64","","",33,null],[13,"Unsuffixed","","",33,null],[4,"IntTy","","",null,null],[13,"Isize","","",34,null],[13,"I8","","",34,null],[13,"I16","","",34,null],[13,"I32","","",34,null],[13,"I64","","",34,null],[13,"Usize","","",34,null],[13,"U8","","",34,null],[13,"U16","","",34,null],[13,"U32","","",34,null],[13,"U64","","",34,null],[13,"Unsuffixed","","",34,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`&quot;foo&quot;`)",35,null],[13,"ByteStr","","A byte string (`b&quot;foo&quot;`)",35,null],[13,"Byte","","A byte char (`b&#39;f&#39;`)",35,null],[13,"Char","","A character literal (`&#39;a&#39;`)",35,null],[13,"Int","","An integer literal (`1`)",35,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",35,null],[13,"Bool","","A boolean literal",35,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `&quot;foo&quot;`",36,null],[13,"Raw","","A raw string, like `r##&quot;foo&quot;##`",36,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",37,null],[13,"Minus","","",37,null],[13,"Star","","",37,null],[13,"Slash","","",37,null],[13,"Percent","","",37,null],[13,"Caret","","",37,null],[13,"And","","",37,null],[13,"Or","","",37,null],[13,"Shl","","",37,null],[13,"Shr","","",37,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",38,null],[13,"Bracket","","A square bracket: `[` or `]`",38,null],[13,"Brace","","A curly brace: `{` or `}`",38,null],[4,"Token","","",null,null],[13,"Eq","","",39,null],[13,"Lt","","",39,null],[13,"Le","","",39,null],[13,"EqEq","","",39,null],[13,"Ne","","",39,null],[13,"Ge","","",39,null],[13,"Gt","","",39,null],[13,"AndAnd","","",39,null],[13,"OrOr","","",39,null],[13,"Not","","",39,null],[13,"Tilde","","",39,null],[13,"BinOp","","",39,null],[13,"BinOpEq","","",39,null],[13,"At","","",39,null],[13,"Dot","","",39,null],[13,"DotDot","","",39,null],[13,"DotDotDot","","",39,null],[13,"Comma","","",39,null],[13,"Semi","","",39,null],[13,"Colon","","",39,null],[13,"ModSep","","",39,null],[13,"RArrow","","",39,null],[13,"LArrow","","",39,null],[13,"FatArrow","","",39,null],[13,"Pound","","",39,null],[13,"Dollar","","",39,null],[13,"Question","","",39,null],[13,"Literal","","",39,null],[13,"Ident","","",39,null],[13,"Underscore","","",39,null],[13,"Lifetime","","",39,null],[13,"DocComment","","",39,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",40,null],[13,"Delimited","","A delimited sequence of token trees",40,null],[4,"Body","","",null,null],[13,"Enum","","",41,null],[13,"Struct","","",41,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",42,null],[13,"Sub","","The `-` operator (subtraction)",42,null],[13,"Mul","","The `*` operator (multiplication)",42,null],[13,"Div","","The `/` operator (division)",42,null],[13,"Rem","","The `%` operator (modulus)",42,null],[13,"And","","The `&amp;&amp;` operator (logical and)",42,null],[13,"Or","","The `||` operator (logical or)",42,null],[13,"BitXor","","The `^` operator (bitwise xor)",42,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",42,null],[13,"BitOr","","The `|` operator (bitwise or)",42,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",42,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",42,null],[13,"Eq","","The `==` operator (equality)",42,null],[13,"Lt","","The `&lt;` operator (less than)",42,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",42,null],[13,"Ne","","The `!=` operator (not equal to)",42,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",42,null],[13,"Gt","","The `&gt;` operator (greater than)",42,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",43,null],[13,"Not","","The `!` operator for logical inversion",43,null],[13,"Neg","","The `-` operator for negation",43,null],[4,"Abi","","",null,null],[13,"Named","","",44,null],[13,"Rust","","",44,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",45,null],[13,"Ty","","Everything else",45,null],[4,"Mutability","","",null,null],[13,"Mutable","","",46,null],[13,"Immutable","","",46,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `&lt;&#39;a, A, B, C&gt;` in `foo::bar::baz::&lt;&#39;a, A, B, C&gt;`",47,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -&gt; C`",47,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",48,null],[13,"Array","","A fixed length array (`[T; n]`)",48,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",48,null],[13,"Rptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",48,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",48,null],[13,"Never","","The never type (`!`)",48,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",48,null],[13,"Path","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;Vec&lt;T&gt; as SomeTrait&gt;::SomeType`.",48,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3`\nwhere `Bound` is a trait or a lifetime.",48,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type\nwhere `Bound` is a trait or a lifetime.",48,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",48,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",48,null],[13,"Mac","","A macro in the type position.",48,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",49,null],[13,"Normal","","",49,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",50,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",50,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",50,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",50,null],[11,"with_lifetimes","","",50,null],[11,"with_lifetime_names","","",50,null],[11,"with_lifetime","","",50,null],[11,"lifetime_name","","",50,null],[11,"lifetime","","",50,null],[11,"with_ty_params","","",50,null],[11,"with_ty_param_ids","","",50,null],[11,"with_ty_param","","",50,null],[11,"ty_param_id","","",50,null],[11,"ty_param","","",50,null],[11,"with_predicates","","",50,null],[11,"with_predicate","","",50,null],[11,"predicate","","",50,null],[11,"add_lifetime_bound","","",50,null],[11,"add_ty_param_bound","","",50,null],[11,"strip_bounds","","",50,null],[11,"strip_lifetimes","","",50,null],[11,"strip_ty_params","","",50,null],[11,"strip_predicates","","",50,null],[11,"build","","",50,null],[11,"invoke","","",50,null],[11,"invoke","","",50,null],[11,"invoke","","",50,null],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",51,null],[11,"to_ident","syn","",52,null],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",53,null],[10,"invoke","","",53,null],[11,"clone","","",54,null],[11,"invoke","","",54,null],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",55,null],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",56,null],[11,"into_lifetime","syn","",4,null],[11,"into_lifetime_def","","",5,null],[11,"into_lifetime_def","","",4,null],[11,"new","syn::aster::lifetime","",57,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",57,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",57,null],[11,"build","","",57,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",58,null],[11,"into_path","syn","",19,null],[11,"into_path","","",52,null],[11,"new","syn::aster::path","",59,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",59,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",59,null],[11,"global","","",59,null],[11,"ids","","",59,null],[11,"id","","",59,null],[11,"segment","","",59,null],[11,"ids","","",60,null],[11,"id","","",60,null],[11,"segment","","",60,null],[11,"build","","",60,null],[11,"invoke","","",60,null],[11,"with_callback","","",61,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",61,null],[11,"with_lifetimes","","",61,null],[11,"with_lifetime","","",61,null],[11,"lifetime","","",61,null],[11,"with_tys","","",61,null],[11,"with_ty","","",61,null],[11,"ty","","",61,null],[11,"with_binding","","",61,null],[11,"binding","","",61,null],[11,"no_return","","",61,null],[11,"return_","","",61,null],[11,"build_return","","",61,null],[11,"build","","",61,null],[11,"invoke","","",61,null],[11,"invoke","","",62,null],[11,"invoke","","",63,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf`\nand `Path`.",64,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",64,null],[11,"ty","","Build a qualified path first by starting with a type builder.",64,null],[11,"build","","Build a qualified path with a concrete type and path.",64,null],[11,"invoke","","",64,null],[11,"as_","","Build a qualified path with a path builder.",65,null],[11,"id","","",65,null],[11,"segment","","",65,null],[11,"invoke","","",65,null],[11,"id","","",66,null],[11,"segment","","",66,null],[11,"invoke","","",66,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",67,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",67,null],[11,"id","","",67,null],[11,"build_path","","",67,null],[11,"build_qpath","","",67,null],[11,"path","","",67,null],[11,"qpath","","",67,null],[11,"isize","","",67,null],[11,"i8","","",67,null],[11,"i16","","",67,null],[11,"i32","","",67,null],[11,"i64","","",67,null],[11,"usize","","",67,null],[11,"u8","","",67,null],[11,"u16","","",67,null],[11,"u32","","",67,null],[11,"u64","","",67,null],[11,"f32","","",67,null],[11,"f64","","",67,null],[11,"bool","","",67,null],[11,"unit","","",67,null],[11,"tuple","","",67,null],[11,"build_slice","","",67,null],[11,"slice","","",67,null],[11,"ref_","","",67,null],[11,"never","","",67,null],[11,"infer","","",67,null],[11,"option","","",67,null],[11,"result","","",67,null],[11,"phantom_data","","",67,null],[11,"box_","","",67,null],[11,"iterator","","",67,null],[11,"impl_trait","","",67,null],[11,"invoke","","",68,null],[11,"invoke","","",69,null],[11,"invoke","","",70,null],[11,"mut_","","",71,null],[11,"lifetime","","",71,null],[11,"build_ty","","",71,null],[11,"ty","","",71,null],[11,"invoke","","",71,null],[11,"invoke","","",72,null],[11,"invoke","","",73,null],[11,"invoke","","",74,null],[11,"invoke","","",75,null],[11,"invoke","","",76,null],[11,"invoke","","",77,null],[11,"with_bounds","","",78,null],[11,"with_bound","","",78,null],[11,"bound","","",78,null],[11,"with_generics","","",78,null],[11,"with_lifetimes","","",78,null],[11,"lifetime","","",78,null],[11,"build","","",78,null],[11,"invoke","","",78,null],[11,"with_tys","","",79,null],[11,"with_ty","","",79,null],[11,"ty","","",79,null],[11,"build","","",79,null],[11,"invoke","","",79,null],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",80,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",80,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",80,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",80,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",80,null],[11,"default","","",80,null],[11,"with_bound","","",80,null],[11,"bound","","",80,null],[11,"with_trait_bound","","",80,null],[11,"trait_bound","","",80,null],[11,"lifetime_bound","","",80,null],[11,"build","","",80,null],[11,"invoke","","",80,null],[11,"invoke","","",80,null],[11,"invoke","","",80,null],[11,"new","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",81,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",81,null],[11,"trait_","","",81,null],[11,"maybe_trait","","",81,null],[11,"iterator","","",81,null],[11,"lifetime","","",81,null],[11,"invoke","","",82,null],[11,"with_callback","","",83,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",83,null],[11,"lifetime","","",83,null],[11,"build","","",83,null],[11,"invoke","","",83,null],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",84,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",84,null],[11,"lifetime","","",84,null],[11,"invoke","","",84,null],[11,"invoke","","",85,null],[11,"with_for_lifetime","","",86,null],[11,"for_lifetime","","",86,null],[11,"with_bound","","",86,null],[11,"bound","","",86,null],[11,"trait_","","",86,null],[11,"lifetime","","",86,null],[11,"invoke","","",86,null],[11,"invoke","","",86,null],[11,"with_for_lifetime","","",87,null],[11,"for_lifetime","","",87,null],[11,"with_bound","","",87,null],[11,"bound","","",87,null],[11,"trait_","","",87,null],[11,"lifetime","","",87,null],[11,"build","","",87,null],[11,"invoke","","",87,null],[11,"invoke","","",87,null],[11,"bound","","",88,null],[11,"build","","",88,null],[11,"to_tokens","syn","",0,null],[11,"to_tokens","","",25,null],[11,"to_tokens","","",26,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"name","","",0,null],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"eq","","",24,null],[11,"hash","","",24,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"hash","","",25,null],[11,"name","","",25,null],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"hash","","",26,null],[11,"to_tokens","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"hash","","",27,null],[11,"to_tokens","","",2,null],[11,"to_tokens","","",28,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",29,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"hash","","",28,null],[11,"fields","","",28,null],[11,"fields_mut","","",28,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"hash","","",29,null],[11,"to_tokens","","",3,null],[11,"to_tokens","","",89,null],[11,"to_tokens","","",90,null],[11,"to_tokens","","",91,null],[11,"to_tokens","","",4,null],[11,"to_tokens","","",5,null],[11,"to_tokens","","",6,null],[11,"to_tokens","","",31,null],[11,"to_tokens","","",8,null],[11,"to_tokens","","",32,null],[11,"to_tokens","","",7,null],[11,"to_tokens","","",10,null],[11,"to_tokens","","",9,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"split_for_impl","","Split a type&#39;s generics into the pieces required for impl&#39;ing a trait\nfor that type.",3,null],[11,"as_turbofish","","Turn a type&#39;s generics like `&lt;X, Y&gt;` into a turbofish like `::&lt;X, Y&gt;`.",90,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",4,null],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"hash","","",31,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"hash","","",30,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"hash","","",32,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"hash","","",9,null],[11,"to_tokens","","",52,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"hash","","",52,null],[11,"new","","",52,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",52,null],[11,"fmt","","",52,null],[11,"eq","","",52,null],[11,"to_tokens","","",35,null],[11,"fmt","","",34,null],[11,"fmt","","",33,null],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"hash","","",35,null],[11,"fmt","","",36,null],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"hash","","",36,null],[11,"from","","",35,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",35,null],[11,"from","","",35,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"hash","","",34,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"hash","","",33,null],[11,"from","","",35,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"to_tokens","","",12,null],[11,"to_tokens","","",40,null],[11,"to_tokens","","",11,null],[11,"to_tokens","","",39,null],[11,"to_tokens","","",37,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",40,null],[11,"clone","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"hash","","",40,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"hash","","",11,null],[11,"fmt","","",39,null],[11,"clone","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"hash","","",39,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"eq","","",37,null],[11,"hash","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"eq","","",38,null],[11,"hash","","",38,null],[11,"to_tokens","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"hash","","",13,null],[11,"fmt","","",41,null],[11,"clone","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"hash","","",41,null],[11,"op","","",42,null],[11,"assign_op","","",42,null],[11,"to_tokens","","",42,null],[11,"op","","",43,null],[11,"to_tokens","","",43,null],[11,"fmt","","",42,null],[11,"clone","","",42,null],[11,"eq","","",42,null],[11,"hash","","",42,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"eq","","",43,null],[11,"hash","","",43,null],[11,"to_tokens","","",48,null],[11,"to_tokens","","",46,null],[11,"to_tokens","","",19,null],[11,"to_tokens","","",20,null],[11,"to_tokens","","",47,null],[11,"to_tokens","","",14,null],[11,"to_tokens","","",23,null],[11,"to_tokens","","",18,null],[11,"to_tokens","","",21,null],[11,"to_tokens","","",16,null],[11,"to_tokens","","",15,null],[11,"to_tokens","","",49,null],[11,"to_tokens","","",44,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"hash","","",48,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"hash","","",17,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"eq","","",46,null],[11,"hash","","",46,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"hash","","",19,null],[11,"from","","",19,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"hash","","",20,null],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"hash","","",47,null],[11,"none","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",47,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",14,null],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"hash","","",18,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"hash","","",22,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"hash","","",16,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"eq","","",49,null],[11,"hash","","",49,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"hash","","",44,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"hash","","",15,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"hash","","",45,null],[0,"visit","","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",92,null],[11,"visit_derive_input","","",92,null],[11,"visit_ty","","",92,null],[11,"visit_generics","","",92,null],[11,"visit_ty_param_bound","","",92,null],[11,"visit_poly_trait_ref","","",92,null],[11,"visit_variant_data","","",92,null],[11,"visit_field","","",92,null],[11,"visit_variant","","",92,null],[11,"visit_lifetime","","",92,null],[11,"visit_lifetime_def","","",92,null],[11,"visit_path","","",92,null],[11,"visit_path_segment","","",92,null],[11,"visit_path_parameters","","",92,null],[11,"visit_assoc_type_binding","","",92,null],[11,"visit_attribute","","",92,null],[11,"visit_fn_ret_ty","","",92,null],[11,"visit_const_expr","","",92,null],[11,"visit_lit","","",92,null],[11,"visit_mac","","",92,null]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[8,"Visitor"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the &#39;XID_Start&#39;\nUnicode property.",0,null],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the &#39;XID_Continue&#39;\nUnicode property.",0,null]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
